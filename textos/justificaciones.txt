DIAGRAMA GENERAL
Clase Colaborador
Se decide crear una clase concreta colaborador que englobe los atributos que se consideran más importantes (TipoDeColaborador y MediosDeContacto) y se agrega un formulario para las preguntas específicas sobre cada tipo. Si bien en un inicio se pensó en colaborador como una clase abstracta de la cual hereden los dos tipos nombrados anteriormente, finalmente se terminó descartando esta opción ya que entre estos no había algún comportamiento distinto y pueden aparecer nuevos tipos de colaboradores, por lo que en vez de usar 
una relación tan fuerte como la herencia, resultó más conveniente, un formulario que contenga los nuevos atributos/preguntas que puedan llegar a surgir.

Clase Formulario
Se crea una clase Formulario que tiene una lista de Preguntas, y tanto el Formulario como las preguntas son reutilizables. Tiene un método cargarRespuestas(colaborador:Colaborador) que le va pedir al Colaborador que responda a cada una de las preguntas, y estas se van a guardar luego en un Map de clave Pregunta y valor String (respuesta). 

Interfaz Contribucion
Se crean distintas clases para cada forma de contribución (DonacionDeViandas, DonacionDeDinero, DistribucionDeViandas, HacerseCargoDeHeladera), ya que cada una tiene sus propias relaciones 
con otras clases, pero a la vez, se necesita que las mismas se puedan guardar en una lista de contribuciones que posee el colaborador. Se piensa inicialmente en heredar de una clase 
abstracta, pero no hay algún comportamiento repetido que justifique esta decisión, también se baraja la posibilidad de que el atributo de Colaborador sea una List<Object>, pero con esto el 
sistema abre la posibilidad de agregar cualquier clase de elemento a la lista de colaboraciones. Por lo que finalmente se decide ir con esta interfaz Contribución, la cual posee un método 
contribuir() en el que posteriormente se mostrará el comportamiento propio que tendrá cada contribución cuando esta sea realizada por un colaborador.



Clase HacerseCargoDeHeladera
Con la información especificada, se decide que esta colaboración por el momento esté compuesta por una heladera.

Clase DonacionDeDinero
La clase DonacionDeDinero tiene un atributo Frecuencia el cual no necesariamente tiene que estar seteado, el no tenerlo significa que la donación de dinero es única.

Enums TipoDocumento, TipoJuridico, Frecuencia, MotivoDistribucion, TipoDeContacto

En estos casos, usar enum sobre Strings nos permite evitar inconsistencia de datos, y además es conveniente porque es poco probable que estos enums sufran muchos cambios a lo largo del tiempo.

DIAGRAMA DEL VALIDADOR
Se tiene una clase usuario, donde se lo inicializa con su nombre y posteriormente se le asigna un validador (ya que este necesita su nombre de usuario para verificar que no coincida con la contraseña). Además, tiene un método obtenerContrasenia(contrasenia: String), donde se le pide al validador que verifique que el parámetro ingresado sea válido, y si es así, se asigna este valor como la contraseña del usuario. El validador para hacer esta evaluación, tiene un método validarContrasenia(contrasenia: String), donde verifica que el valor pasado cumpla con todas las condiciones que posee el validador (guardadas en una lista, ya que en el futuro podrían agregarse más). Estas condiciones son modeladas como clases separadas que implementan la interfaz Condicion, que tiene el método validarCondicion(contrasenia: String).
